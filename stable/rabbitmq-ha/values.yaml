## Source values.yaml file with comments:
## https://github.com/Cyreex/charts/blob/master/stable/rabbitmq-ha/values.yaml
#
rabbitmqUsername: guest
rabbitmqPassword: guest

managementUsername: management

extraConfig: |
  disk_free_limit.absolute = 250M
  queue_master_locator = min-masters
  mnesia_table_loading_retry_limit = 10
  mnesia_table_loading_retry_timeout = 30000

advancedConfig: |

definitionsSource: definitions.json

extraPlugins: |
  rabbitmq_management,
  rabbitmq_shovel,
  rabbitmq_shovel_management,
  rabbitmq_delayed_message_exchange,

definitions:
  globalParameters: |-

  users: |-

  vhosts: |-

  parameters: |-

  permissions: |-

  queues: |-

  exchanges: |-

  bindings: |-

  policies: |
    {
        "vhost": "/",
        "name": "tp.metrics.default",
        "pattern": "^(tp.metrics.)(?!.*errors$)",
        "apply-to": "queues",
        "definition": {
            "queue-mode": "lazy",
            "ha-mode": "exactly",
            "ha-sync-mode": "automatic",
            "ha-params": 2
        },
        "priority": 0
    },
    {
        "vhost": "/",
        "name": "tp.metrics.errors.default",
        "pattern": "^(tp.metrics.)(.*errors$)",
        "apply-to": "queues",
        "definition": {
            "queue-mode": "lazy",
            "ha-mode": "exactly",
            "ha-params": 2,
            "message-ttl": 604800000,
            "ha-sync-mode": "automatic"
        },
        "priority": 0
    },
    {
        "vhost": "/",
        "name": "tp.rule_engine.default",
        "pattern": "^(tp.rule_engine.)(?!.*errors$)",
        "apply-to": "queues",
        "definition": {
          "queue-mode": "lazy",
            "ha-mode": "exactly",
            "ha-sync-mode": "automatic",
            "ha-params": 2
        },
        "priority": 0
    },
    {
        "vhost": "/",
        "name": "tp.rule_engine.errors.default",
        "pattern": "^(tp.rule_engine.)(.*errors$)",
        "apply-to": "queues",
        "definition": {
            "queue-mode": "lazy",
            "message-ttl": 604800000,
            "ha-mode": "exactly",
            "ha-params": 2,
            "ha-sync-mode": "automatic"
        },
        "priority": 0
    },
    {
        "vhost": "/",
        "name": "tp.notification_center.default",
        "pattern": "^(tp.notification_center.)(?!.*errors$)",
        "apply-to": "queues",
        "definition": {
            "queue-mode": "lazy",
            "ha-mode": "exactly",
            "ha-sync-mode": "automatic",
            "ha-params": 2
        },
        "priority": 0
    },
    {
        "vhost": "/",
        "name": "tp.notification_center.errors.default",
        "pattern": "^(tp.notification_center.)(.*errors$)",
        "apply-to": "queues",
        "definition": {
            "queue-mode": "lazy",
            "message-ttl": 604800000,
            "ha-mode": "exactly",
            "ha-params": 2,
            "ha-sync-mode": "automatic"
        },
        "priority": 0
    },
    {
        "vhost": "/",
        "name": "workspaces.default",
        "pattern": "^(workspaces.)(?!.*errors$)",
        "apply-to": "queues",
        "definition": {
            "queue-mode": "lazy",
            "ha-mode": "exactly",
            "ha-sync-mode": "automatic",
            "ha-params": 2
        },
       "priority": 0
    },
    {
        "vhost": "/",
        "name": "workspaces.errors.default",
        "pattern": "^(workspaces.)(.*errors$)",
        "apply-to": "queues",
        "definition": {
            "queue-mode": "lazy",
            "message-ttl": 604800000,
            "ha-mode": "exactly",
            "ha-params": 2,
            "ha-sync-mode": "automatic"
        },
        "priority": 0
    },
    {
        "vhost": "/",
        "name": "safe.default",
        "pattern": "^(safe.)(?!.*error$)",
        "apply-to": "queues",
        "definition": {
            "queue-mode": "lazy",
            "ha-mode": "exactly",
            "ha-sync-mode": "automatic",
            "ha-params": 2
        },
        "priority": 0
    },
    {
        "vhost": "/",
        "name": "safe.errors.default",
        "pattern": "^(safe.)(.*error$)",
        "apply-to": "queues",
        "definition": {
            "queue-mode": "lazy",
            "message-ttl": 86400000,
            "ha-mode": "exactly",
            "ha-params": 2,
            "ha-sync-mode": "automatic"
        },
        "priority": 0
    }


## Ref: https://www.rabbitmq.com/rabbitmqctl.8.html#force_boot
forceBoot: false

rabbitmqVhost: "/"
rabbitmqErlangCookie: rlang_cookie

## If you decide to set the memory limit, make sure to also change the
## rabbitmqMemoryHighWatermark following the formula:
##   rabbitmqMemoryHighWatermark = 0.4 * resources.limits.memory
rabbitmqMemoryHighWatermark: 200M
rabbitmqMemoryHighWatermarkType: absolute

rabbitmqEpmdPort: 4369
rabbitmqNodePort: 5672
rabbitmqManagerPort: 15672

rabbitmqHipeCompile: false

rabbitmqCert:
  enabled: false
  existingSecret: ""
  cacertfile: |
  certfile: |
  keyfile: |

extraVolumes: []
extraVolumeMounts: []

rabbitmqAuth:
  enabled: false
  config: |

rabbitmqClusterPartitionHandling: pause_minority

rabbitmqAuthHTTP:
  enabled: false
  config: |

rabbitmqLDAPPlugin:
  enabled: false
  config: |

rabbitmqMQTTPlugin:
  enabled: false
  config: |

rabbitmqWebMQTTPlugin:
  enabled: false
  config: |

rabbitmqSTOMPPlugin:
  enabled: false
  config: |

rabbitmqWebSTOMPPlugin:
  enabled: false
  config: |

rabbitmqPrometheusPlugin:
  enabled: false
  nodePort: null
  port: 15692
  path: /metrics
  config: |

rabbitmqAmqpsSupport:
  enabled: false
  amqpsNodePort: 5671
  config: |

replicaCount: 3

image:
  repository: docker.tpondemand.net/infrastructure/rabbitmq-ha
  tag: 1.0.0
  pullPolicy: IfNotPresent
  pullSecrets:
  - nexus-registry-secop

busyboxImage:
  repository: busybox
  tag: 1.30.1
  pullPolicy: IfNotPresent

terminationGracePeriodSeconds: 10

service:
  annotations:
    kong/request-path: "/private/rabbitmq-ha-admin/"
    kong/preserve-host: "false"
    kong/strip-request-path: "true"
  clusterIP: None

  externalIPs: []

  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  type: NodePort

  epmdNodePort: 30024
  amqpNodePort: 30022
  managerNodePort: 30023

podManagementPolicy: Parallel

updateStrategy: RollingUpdate

priorityClassName: cluster-critical

resources:
  limits:
    memory: 512Mi
    cpu: 9999
  requests:
    memory: 512Mi
    cpu: 500m

initContainer:
  resources: {}

extraInitContainers: []
extraContainers: []

persistentVolume:
  enabled: true
  storageClass: slow
  name: data
  accessModes:
    - ReadWriteOnce
  size: 6Gi
  annotations: {}

# To use a hostPath for data, you need to set persistentVolume.enabled: false
# and define hostPath.path
# Warning: this might overwrite existing folders on the host system!
hostPath:
  enabled: false
  ## path is evaluated as template so placeholders are replaced
  path: /data/rabbitmq-ha
  # if chown is true, an init-container with root permissions is launched to
  # change the owner of the hostPath folder to the user defined in the
  # security context
  chown: true
  type: DirectoryOrCreate
  # we need to use path on all hosts to save data
  mnesiaDir: $RABBITMQ_MNESIA_BASE/mnesia_dir
  pluginsExpandDir: $RABBITMQ_MNESIA_BASE/plugins-expand


nodeSelector: []

tolerations: []

podAnnotations: {}

podAntiAffinity: hard
podAntiAffinityTopologyKey: "kubernetes.io/hostname"

existingConfigMap: false

extraLabels: {}

rbac:
  create: true

serviceAccount:
  create: true
  automountServiceAccountToken: true

ingress:
  enabled: false
  path: /
  tls: false
  tlsSecret: myTlsSecret
  annotations: {}

livenessProbe:
  initialDelaySeconds: 300
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  exec:
    command:
      - /bin/sh
      - -c
      - 'wget -O - -q --header "Authorization: Basic `echo -n \"$RABBIT_MANAGEMENT_USER:$RABBIT_MANAGEMENT_PASSWORD\" | base64`" http://localhost:15672/api/healthchecks/node | grep -qF "{\"status\":\"ok\"}"'

readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 1
  failureThreshold: 6
  exec:
    command:
      - /bin/sh
      - -c
      - 'wget -O - -q --header "Authorization: Basic `echo -n \"$RABBIT_MANAGEMENT_USER:$RABBIT_MANAGEMENT_PASSWORD\" | base64`" http://localhost:15672/api/healthchecks/node | grep -qF "{\"status\":\"ok\"}"'

# Specifies an existing secret to be used for RMQ password, management user password and Erlang Cookie
existingSecret: ""

securityContext:
  fsGroup: 101
  runAsGroup: 101
  runAsNonRoot: true
  runAsUser: 100

## Sets environment variables for the rabbitmq container
env:
  RABBITMQ_NODE_NAME_PATTERN: rabbit@rabbitmq-${index}.rabbitmq-cluster
  HOST_RESOLUTION_TIMEOUT: 120
  WAIT_BEFORE_START: 0
  PID_WAIT_TIMEOUT: 120

prometheus:
  exporter:
    enabled: true
    env:
      OUTPUT_FORMAT: JSON
      LOG_LEVEL: INFO
      SKIPVERIFY: true
      INCLUDE_QUEUES: ".*"
      SKIP_QUEUES: "(^$)|(.*balancing_queue#.*)"
    image:
      repository: kbudde/rabbitmq-exporter
      tag: latest
      pullPolicy: IfNotPresent
    port: 9090
    capabilities: "no_sort"
    resources:
      limits:
        memory: 30Mi
        cpu: 100m
      requests:
        memory: 20Mi
        cpu: 100m
  operator:
    enabled: true
    alerts:
      enabled: false
      selector:
        role: alert-rules
      labels: {}
    serviceMonitor:
      interval: 30s
      namespace: monitoring
      selector:
        prometheus: service-monitor

clusterDomain: cluster.local
podDisruptionBudget: {}

## Sensu CRD configuration
sensu:
  ignoreCrd: true
  crdName:
  subscriptions:
    - rabbitmq
    - rabbitmq-ha
